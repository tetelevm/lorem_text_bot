import re

from telegram import Update, ParseMode
from telegram.ext import CallbackContext

from lorem_generator import lorem_generator


__all__ = [
    "received_message",
    "command_start",
    "command_help",
    "command_lorem",
    "command_translation",
    "command_translorem",
]


messages = {
    "message": (
        "üñêÔ∏è –ü—Ä–∏–≤–µ—Ç!\n"
        "ü§ñ –Ø –≤—Å–µ–≥–æ –ª–∏—à—å –≥–ª—É–ø—ã–π —Ä–æ–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤.\n"
        "‚ùì –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã –æ–ø–∏—Å–∞–Ω—ã –≤ —Å–ø—Ä–∞–≤–∫–µ /help"
    ),
    "start": (
        "üñê –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìÉ /lorem - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å *–ø—Å–µ–≤–¥–æ—Ç–µ–∫—Å—Ç*\n"
        "üà≤ /trans - *–ø–µ—Ä–µ–≤–æ–¥* —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n"
        "üì∞ /translorem - –ø–æ–ø—ã—Ç–∫–∞ *–ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Å–µ–≤–¥–æ—Ç–µ–∫—Å—Ç–∞*\n"
        "üßê /help - *—Å–ø—Ä–∞–≤–∫–∞* (–±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é)"
    ),

    "help": {
        "default": (
            "‚ùì –Ø - –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–µ–≤–¥–æ—Ç–µ–∫—Å—Ç–æ–≤ ü§ñ. –Ø –∑–Ω–∞—é –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üìÉ /lorem - –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É —Å–æ–∑–¥–∞—é *—Ç–µ–∫—Å—Ç —Å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏"
            " —Å–ª–æ–≤–∞–º–∏*, –∫–æ—Ç–æ—Ä—ã–π –ø–æ –∑–≤—É—á–∞–Ω–∏—é –ø–æ—Ö–æ–∂ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –Ω–æ –ø–æ —Ñ–∞–∫—Ç—É lorem\n\n"
            "üà≤ /trans - –±–µ—Ä—É *—Å–ª—É—á–∞–π–Ω—ã–µ –∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã* –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫—É"
            " –Ω–∞ –ø–µ—Ä–µ–≤–∞—Ä–∏–≤–∞–Ω–∏–µ (–∏–Ω–æ–≥–¥–∞ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤–µ–¥—ë—Ç—Å—è –Ω–∞ —Ç–∞–∫–æ–µ)\n\n"
            "üì∞ /translorem - –≥–µ–Ω–µ—Ä–∏—Ä—É—é *–ø—Å–µ–≤–¥–æ—Ç–µ–∫—Å—Ç*, –∞ –∑–∞—Ç–µ–º –ø—ã—Ç–∞—é—Å—å –ø–æ–¥—Å—É–Ω—É—Ç—å"
            " –µ–≥–æ *–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫—É* –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ–¥–∫–æ–º —è–∑—ã–∫–µ\n\n"
            "üßê /help - –≤—ã–≤–æ–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "ü§ì –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Ç–æ –≤—ã–∑–æ–≤–∏ <`/help [–∫–æ–º–∞–Ω–¥–∞]`>"
            " (–Ω–∞–ø—Ä–∏–º–µ—Ä <`/help /lorem`>)\n\n"
            "–ò—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏ —Å–æ–±—Ä–∞–Ω–Ω–∞—è –≤–æ–µ–¥–∏–Ω–æ —Å–ø—Ä–∞–≤–∫–∞ <[–ª–µ–∂–∞—Ç —Ç—É—Ç]"
            "(https://github.com/tetelevm/lorem_text_bot)> üêô.–¢–∞–º –∂–µ –º–æ–∂–Ω–æ"
            " —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤."
        ),
        "help": "ü™≤‚ùì –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ä–µ–∫—É—Ä—Å–∏—è, –Ω–µ –¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫!",
        "lorem": (
            "üìÉ /lorem –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç *–ø—Å–µ–≤–¥–æ—Ç–µ–∫—Å—Ç*.\n\n"
            "üß† *–ê–ª–≥–æ—Ä–∏—Ç–º* —Ç–∞–∫–æ–π, —á—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω—è—é—â–∏–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞"
            " —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n"
            "–î–ª—è —ç—Ç–æ–≥–æ –¥–ª—è __–ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤__ –≤ —Å—Ç—Ä–æ–∫–µ –∏—â–µ—Ç—Å—è –∏—Ö —Å–ª—É—á–∞–π–Ω–æ–µ"
            " —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ. –ó–∞—Ç–µ–º –≤ —Ç–µ–∫—Å—Ç –ª–æ—Ä–µ–º–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è"
            " __—Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã__ –∑–∞ –Ω–∏–º–∏. –ê –¥–∞–ª—å—à–µ –æ–Ω–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–æ–≤—ã–º–∏"
            " —Å–∏–º–≤–æ–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ.\n"
            "–ß–µ–º –±–æ–ª—å—à–µ –±–µ—Ä—ë—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–≤, —Ç–µ–º –±–æ–ª–µ–µ –ø–æ—Ö–æ–∂ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π"
            " —è–∑—ã–∫.\n\n"
            "ü™õ –í—ã–∑–æ–≤ –∏–º–µ–µ—Ç –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:\n"
            "- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 48, –≤–∞—Ä–∏–∞–Ω—Ç—ã 32-256)\n"
            "- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2, –≤–∞—Ä–∏–∞–Ω—Ç—ã 1-3)\n\n"
            "üìó–ü—Ä–∏–º–µ—Ä—ã: <`/lorem`> <`/lorem 128`> <`/lorem 64 1`>"
        ),
        "translation": "# TODO",
        "translorem": "# TODO",
        "unknown": "üîé –ò—â–µ–º-–∏—â–µ–º... –ù–µ –Ω–∞—à–ª–∏ —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è `<{}>`.",
    },

    "lorem": {
        "word_error": "ü™≤ –û—à–∏–±–∫–∞! –ù–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ `<{}>`.",
        "word_count": "ü™≤ –û—à–∏–±–∫–∞! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5-256, —É –≤–∞—Å `<{}>`.",
        "chars_error": "ü™≤ –û—à–∏–±–∫–∞! –ù–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ `<{}>`.",
        "chars_count": "ü™≤ –û—à–∏–±–∫–∞! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1-3, —É –≤–∞—Å `<{}>`.",
    },

    "todo": "üíª –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤, –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.",
}


repeated_spaces_pattern = re.compile(r"[\s]+")

def get_params(text: str) -> list[str]:
    """
    Parses query arguments: splits by spaces and returns everything after
    the first (the command proper).
    """

    text = repeated_spaces_pattern.sub(" ", text)
    params = text.strip().split(" ")
    return params[1:]


# =====================================================================


def received_message(update: Update, context: CallbackContext):
    """
    Bot does not know how to work with messages, so just a stub.
    """
    update.effective_chat.send_message(
        messages["message"],
        parse_mode=ParseMode.MARKDOWN
    )


def command_start(update: Update, context: CallbackContext):
    """
    Standard welcome.
    """
    update.effective_chat.send_message(
        messages["start"],
        parse_mode=ParseMode.MARKDOWN
    )


def command_help(update: Update, context: CallbackContext):
    """
    Displays either general help or help for a known command. Usage:
    /help
    /help /command
    """

    input_text = update.message.text
    params = get_params(input_text)

    if not params:
        message = messages["help"]["default"]
    elif params[0] in ["/help", "/lorem", "/translation", "/translorem"]:
        message = messages["help"][params[0][1:]]
    else:
        message = messages["help"]["unknown"].format(params[0])

    update.effective_chat.send_message(
        message,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True
    )


def command_lorem(update: Update, context: CallbackContext):
    """
    Returns a lorem-like pseudo-text that looks like a real language.
    Has 2 optional positional integer arguments - `word count` and
    `characters count`. Usage:
    /lorem
    /lorem 128
    /lorem 128 3
    """

    def get_response(word_count: str = None, chars_len: str = None, *args) -> str:
        """
        Parses arguments to generate and generates pseudotext.
        """

        # parse word_count
        if word_count is None:
            word_count = lorem_generator.default_word_count
        else:
            try:
                word_count = int(word_count)
            except ValueError:
                return messages["lorem"]["word_error"].format(word_count)
        if not (5 <= word_count <= 256):
            return messages["lorem"]["word_count"].format(word_count)

        # parse chars_len
        if chars_len is None:
            chars_len = lorem_generator.default_chars_len
        else:
            try:
                chars_len = int(chars_len)
            except ValueError:
                return messages["lorem"]["chars_error"].format(chars_len)
        if not (1 <= chars_len <= 3):
            return messages["lorem"]["chars_count"].format(chars_len)

        # generate lorem
        lorem = lorem_generator.generate_lorem(word_count, chars_len)
        return lorem

    input_text = update.message.text
    params = get_params(input_text)
    message = get_response(*params)
    update.effective_chat.send_message(message, parse_mode=ParseMode.MARKDOWN)


def command_translation(update: Update, context: CallbackContext):
    """
    Feature in development.
    """
    update.effective_chat.send_message(messages["todo"])


def command_translorem(update: Update, context: CallbackContext):
    """
    Feature in development.
    """
    update.effective_chat.send_message(messages["todo"])
